package Districting;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

/**
 * Region is represented as a rectangular grid where each cell is a voter.
 * Each cell is colored based on the party of that voter.
 * Region can be divided into districts.
 * Dividing the region is handled by Districting.java.
 * Created regions are serializable and can be saved and retrieved from file.
 * @author Josh McKinstry, Matt Kline, Dong (Bob) Lee
 */
public class Region implements Serializable {

    /** Region represented as a grid of voters. */
    private Voter[][] regionGrid;
    /** String identifier to distinguish regions. */
    private String regionID;
    /** Truth value identifies whether region has been districted. */
    private boolean isDistricted;
    /** List of the districts that divide the region. */
    private List<District> regionDistricts;
    /** Party represented by the majority of districts is favored. */
    private char regionFavoredParty;
    /** Stores the amount of voters in the region. */
    private int counterForVotersInRegion;

    /**
     * Constructor builds new undistricted region with no dimensions.
     * @param regionID String to identify the region
     */
    public Region(final String regionID) {
        this.regionID = regionID;
        this.isDistricted = false;
        regionGrid = new Voter[0][0];
        regionDistricts = new ArrayList<District>();
    }

    /**
     * Constructor builds new undistricted region with dimensions.
     * @param regionID String to identify the region
     * @param rows Vertical dimension of regionGrid
     * @param columns Horizontal dimension of regionGrid
     */
    public Region(final String regionID, final int rows, final int columns) {
        this.regionID = regionID;
        this.isDistricted = false;
        regionGrid = new Voter[rows][columns];
        regionDistricts = new ArrayList<District>();
    }

    /**
     * Add a voter to the region, to be used by populateRegion method.
     * @param voter Voter to be added
     */
    public void addVoter(final Voter voter) {
        if (counterForVotersInRegion == 0) {
            regionGrid[0][0] = voter;
            counterForVotersInRegion++;
            return;
        } else if (regionGrid[0].length < counterForVotersInRegion) {
            regionGrid[0][counterForVotersInRegion] = voter;
            counterForVotersInRegion++;
            return;
        } else {
            for (int i = 0;  i < regionGrid.length; i++) {
                int rowNumber = regionGrid[i].length * i;
                if (regionGrid[i].length < (counterForVotersInRegion - rowNumber)) {
                    regionGrid[i][counterForVotersInRegion - rowNumber] = voter;
                    counterForVotersInRegion++;
                    return;
                }
            }
        }
    }

    /** Remove a voter from the region.
     * @param voter Voter to be removed
     */
    private void removeVoter(final Voter voter) {
        if (regionGrid.length == 0) {
            return;
        }
        --counterForVotersInRegion;
        for (int index = 0; index < regionGrid.length; index++) {
            for (int inner = 0; inner < regionGrid[index].length; inner++) {
                if (regionGrid[index][inner] == voter) {
                    regionGrid[index][inner] = null;
                    return;
                 }
             }
         }
    }
    /**
     * Retrieve unique region identifier.
     * @return regionID Unique String to distinguish regions
     */
    public String getID() {
        return this.regionID;
    }

    /**
     * Set a unique region identifier.
     * @param regionID Unique String to distinguish regions
     */
    public void setID(final String regionID) {
        this.regionID = regionID;
    }

    /**
     * Gives region dimensions, then populates empty
     * region spaces with undeclared voters.
     * @param rows Desired vertical dimension of region
     * @param columns Desired horizontal dimension of region
     */
    public void populateRegion(final int rows, final int columns) {
    	regionGrid = new Voter[rows][columns];	
    }

    /**
     * An already sized region populates all empty region spaces
     * with undeclared voters.
     */
    public void populateRegion() {

    }

    /**
     * User manually declared party affiliation for each voter.
     * @param party takes the party input for assigning
     * @return New Region with declared Voters
	 * Last modified by Bob. 11:40AM 04/28/17
     */
    public Voter[][] setPartyManual(final char party) {
        for (int row = 0; row < regionGrid.length; row++) {
            for (int column = 0; column < regionGrid[row].length; column++) {
                regionGrid[row][column].setParty(party); //Should pass a char
            }
        }
        return regionGrid;
    }

    /**
     * Randomly declares party for each voter in the region.
     * @return New Region with declared Voters
     */
    public Voter[][] setPartyAuto() {
        Random rand = new Random();

        char a = 'a';
    	char b = 'b';
    	int  n = 0;
    	for (int row = 0; row < regionGrid.length; row++) {
            for (int column = 0; column < regionGrid[row].length; column++) {
            	n = rand.nextInt(1);
            	if (n == 0) {
            		regionGrid[row][column].setParty(a);
            	} else {
            		regionGrid[row][column].setParty(b);
            	}	
            }
        }
    	return regionGrid;
    }

    /**
     * Change party of single voter in grid by their voterID.
     * @param voterID ID of voter of which to change party
     */
    public void changePartyByID(final int voterID) {
        char a = 'a';
        char b = 'b';
        for (int index = 0; index < regionGrid.length; index++) {
            for (int inner = 0; inner < regionGrid[index].length; inner++) {
                if (regionGrid[index][inner].getID() == voterID) {
                   if (regionGrid[index][inner].getParty() == a) {
                        regionGrid[index][inner].setParty(b);
                    } else {
                        regionGrid[index][inner].setParty(a);
                    }
                }
            }
        }
    }

    /**
     * Change party of single voter by their location in the region.
     * @param row The vertical location of voter in grid
     * @param column The horizontal location of voter in grid
     * @return New Region with newly declared Voter
     */
    public Voter[][] changePartyByCell(final int row, final int column) {
        return regionGrid;
    }

    /**
     * Draw a graphical representation of the region using color.
     * Has yet to be implemented.
     */
    public void drawRegionGrid() {

    }

    /**
     * Gives a string representation with ascii art of the region.
     * @return formatted String display of gthe region
     */
    public String toString() {
        return " ";
    }

    /**
     * Clear the region of voters, retains size.
     */
    public void clearRegion() {
        for (int i = 0; i < regionGrid.length; i++) {
            regionGrid[i] = null;
         }
    }

    /**
     * Overrides the size of the region.
     * @param rows New desired vertical dimension
     * @param columns New desired horizontal dimension
     */
    public void resetSize(final int rows, final int columns) {
        regionGrid = new Voter[rows][columns];
    }

    /**
     * Retrieve the Favored Party of the region.
     * @return regionFavoredParty
     */
    public char getFavoredParty() {
        return regionFavoredParty;
    }

    /**
     * Sets Favored Party of the region.
     * @param favoredParty Majority party in region
     */
    public void setFavoredParty(final char favoredParty) {
        this.regionFavoredParty = favoredParty;
    }

	public int getRegionSize(){
        int regionSize = regionGrid[0].length * regionGrid.length;
        return regionSize;		
	}
}
