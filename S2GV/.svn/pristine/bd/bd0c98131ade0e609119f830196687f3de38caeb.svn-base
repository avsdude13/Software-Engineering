package Districting;

import java.util.ArrayList;

/**
 * Performs districting functions/operations on regions.
 * @author Josh McKinstry
 *
 */
public class Districting {

    /** A list of regions to perform redistricting on. */
    private ArrayList<Region> regionList = new ArrayList<Region>();
   
    /** A list of potential districts to separate the region.
     *  One list per region. Contains all possible districts that could
     *  be within the region.
     */
    private ArrayList<District> potentials = new ArrayList<District>();

    /**
     * New districting project on a new region.
     */
    public Districting(int x, int y) {
        this.regionList.add(new Region("R", x, y));
    }
    
    /** Used to interface with the user */
    private UserInterface user = new UserInterface();

    /**
     * Creates and stores properly sized districts for the given region.
     * @param region Region to district
     * @return Region with New properly sized district Object references
     */
    public void numDistricts(final Region region) {
    	int numDist = region.getRegionSize()
    		/ user.userNumDistricts(region.getRegionSize());
    }

    /**
     * Adds the desired number of districts to regionDistricts.
     * @param numDist Number of districts to add
     * @param region Region to add districts to
     * @return Region with new district List
     */
    public void addDistricts(final int numDist, final Region region) {
    	int[] distSizes = sizeDistricts(numDist, region.getRegionSize());
    	for (int i = 0; i < numDist; i++) {
    		region.getRegionDistricts().add(new District("00" + i, distSizes[i]));
    	}
    }

    /**
     * Properly sizes each district with a set limit of voters.
     * @param numDist Number of districts being added
     * @param rSize Number of voters in the region
     * @return districtSizes an array of the sizes for each district
     */
    public int[] sizeDistricts(final int numDist, final int rSize) {
    	int[] districtSizes = new int[numDist];
    	int rem = rSize % numDist;
    	for (int i = 0; i < numDist; i++) {
    		districtSizes[i] = rSize / numDist;
    	}
    	if (rem != 0) {
    		for (int i = 0; i < rem; i++) {
    			++districtSizes[i];
    		}
    	}
    	return districtSizes;
    }
    
    public void partySet(final Region region) {
    	String regionParties = "";
    	if (user.userAssign()) {
    		for (int i = 0; i < region.getRegionSize(); i++) {
    			regionParties = regionParties + user.askParty();
    		}
    	region.setPartyManual(regionParties);
    	}
    	else region.setPartyAuto();
    }

    /**
     * Runs a new districting project. Sizes a new region,
     * populates that region with voters, 
     * @param args takes any input in class calls
     */
    public static void main(final String[] args) {

    	UserInterface user = new UserInterface();
    	int[] dimensions = user.welcome();
        Districting newDis1 = new Districting(dimensions[0], dimensions[1]);
        newDis1.numDistricts(newDis1.regionList.get(0));
        newDis1.regionList.get(0).populateRegion();
        newDis1.partySet(newDis1.regionList.get(0));
        newDis1.regionList.get(0).drawRegionGrid();
    }

}
