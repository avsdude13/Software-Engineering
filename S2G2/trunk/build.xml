<project name="Generic Build" default="all" basedir=".">
  <description>
      Build file for Card Games
  </description>
  <!-- $Id: build.xml 295 2017-03-24 21:26:19Z jody $ -->
  <property name="version" value="$Revision: 295 $"/>

  <!-- set global properties for this build -->
  <property name="src" location="."/>
  <property name="doc" location="doc"/>
  <property name="build" location="build"/>
  <property name="dist" location="dist"/>
  <property name="stylecheck" location="stylecheck"/>
  <property name="test" location="test"/>
  <property name="reports" location="${test}/reports"/>
  <property name="formattedsrc" location="formattedsrc"/>
  <property name="lib" location="lib"/>
    <!-- identify main class -->
  <property name="mainclass" value="swefun.cardgames.ThreeCardRace"/>
    <!-- cobertura directories -->
  <property name="cobertura.dir" location="lib/cobertura"/>
  <property name="coverage.dir" location="coverage"/>
  <property name="classes.dir" location="coverage/classes"/>
  <property name="instrumented.dir" location="coverage/instrumented"/>
  <property name="coverage.reports.dir" location="coverage/reports"/>
  <property name="coverage.reports.junit.xml.dir" location="coverage/reports/junit-xml"/>
  <property name="coverage.reports.junit.html.dir" location="coverage/reports/junit-html"/>
  <property name="coverage.xml.dir" location="coverage/reports//cobertura-xml"/>
  <property name="coverage.summaryxml.dir" location="coverage/reports/cobertura-summary-xml"/>
  <property name="coverage.html.dir" location="coverage/reports/cobertura-html"/>
    <!-- pmd directories -->
  <property name="pmd.dir" location="lib/pmd"/>
  <property name="pmd.reports.dir" location="pmd"/>


  <path id="classpath">
    <fileset dir="${lib}" includes="**/*.jar"/>
  </path>


  <target name="all" depends="clean, doc, report, checkstyle, coverage, pmd, cpd, format"/>

  <target name="init">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
    <!-- Ensure the ${lib} directory exists -->
    <mkdir dir="${lib}"/>
  </target>

  <target name="compile" depends="init"
        description="compile the source" >
    <!-- Compile the java code from ${src} into ${build} -->
    <javac srcdir="${src}" destdir="${build}" classpathref="classpath"
           debug="on" includeantruntime="false" encoding="cp1252"
           memoryinitialsize="1024m" memorymaximumsize="1024m" fork="yes">
      <compilerarg value="-Xlint"/>
    </javac>
  </target>

  <target name="run" depends="compile"
        description="run driver" >
    <java classname="${mainclass}" fork="yes">
      <classpath>
        <path refid="classpath"/>
        <path location="${build}"/>
      </classpath>
    </java>
  </target>


  <target name="test" depends="compile"
        description="run junit tests" >
    <!-- Create the test results directory structure -->
    <mkdir dir="${test}"/>
    <mkdir dir="${reports}"/>
    <!-- Execute JUnit tests and save in ${reports} -->
    <junit printsummary="withOutAndErr" haltonfailure="no" showoutput="true">
      <classpath>
        <path refid="classpath"/>
        <path location="${build}"/>
      </classpath>
      <formatter type="xml"/>
      <formatter type="plain" usefile="false" />
      <formatter type="plain"/>
      <batchtest fork="yes" todir="${reports}">
        <fileset dir="${src}" includes="**/*Test.java"/>
      </batchtest>
    </junit>
  </target>

  <target name="report" depends="test"
        description="format junit test results" >
    <junitreport todir="${reports}">
      <fileset dir="${reports}" includes="TEST-*.xml"/>
      <report todir="${reports}"/>
    </junitreport>
    <echo></echo>
    <echo>Report root: ${reports}/index.html</echo>
  </target>

  <target name="dist" depends="compile"
        description="generate the distribution" >
    <!-- Create the distribution directory -->
    <mkdir dir="${dist}"/>
    <!-- Put everything in ${build} into the ${ant.project.name}-${DSTAMP}.jar file -->
    <jar jarfile="${dist}/${ant.project.name}-${DSTAMP}.jar" basedir="${build}"/>
  </target>

  <target name="doc" depends="init"
        description="generate the usage documentation" >
    <!-- Create the documentation directory -->
    <mkdir dir="${doc}"/>
    <!-- Generate the API documentation for ${src} in ${doc} -->
    <javadoc access="public" destdir="${doc}" classpathref="classpath" encoding="cp1252" additionalparam="-Xdoclint:none">
      <fileset dir="${src}" casesensitive="yes" defaultexcludes="yes">
        <filename name="**/*.java"/>
        <exclude name="**/*Test.java"/>
      </fileset>
      <link href="http://download.oracle.com/javase/8/docs/api/" />
    </javadoc>
  </target>

  <target name="doc-private" depends="init"
        description="generate the maintenance documentation" >
    <!-- Create the documentation directory -->
    <mkdir dir="${doc}"/>
    <!-- Generate the API documentation for ${src} in ${doc} -->
    <javadoc access="private" destdir="${doc}" classpathref="classpath" encoding="cp1252" additionalparam="-Xdoclint:none">
      <fileset dir="${src}" casesensitive="yes" defaultexcludes="yes">
        <filename name="**/*.java"/>
      </fileset>
      <link href="http://download.oracle.com/javase/8/docs/api/" />
    </javadoc>
  </target>

  <target name="format" depends="init"
        description="generate formatted versions of source code" >
    <taskdef name="java2html"
             classname="de.java2html.anttasks.Java2HtmlTask"
             classpath="${lib}/java2html.jar"
    />
    <java2html
      srcdir="${src}"
      destdir="${formattedsrc}"
      includes="**/*.java"
      outputFormat="html"
      tabs="2"
      style="kawa"
      showLineNumbers="true"
      showFileName="true"
      useShortFileName="true"
      showTableBorder="false"
      includeDocumentHeader="true"
      includeDocumentFooter="true"
    />
  </target>

  <target name="format2" depends="init"
        description="generate HTML formatted versions of source code" >
    <taskdef name="j2h"
             classname="com.java2html.Java2HTMLTask"
             classpath="${lib}/j2h.jar"
    />
    <j2h
      title="Card Games Project" 
      simple="no"
      tabsize="4"
      marginsize="4"
      header="true"
      footer="true"
      destination="${formattedsrc}">
      <fileset dir="${src}">
        <include name="**/*.java"/>
      </fileset>
      <!-- javadoc localRef="c:\jdk1.4\docs\api" httpRef="http://somewebsite.com/docs/api"/ -->
      <!-- javadoc localRef="c:\ant\docs\api" httpRef="http://somewebsite.com/docs/api"/ -->
    </j2h>
  </target>



  <!-- Define checkstyle task -->
  <target name="checkstyle" depends="init"
	  description="generate checkstyle report" >
    <taskdef resource="com/puppycrawl/tools/checkstyle/ant/checkstyle-ant-task.properties"
	     classpath="${lib}/checkstyle.jar" />
    <!-- Verify installation -->
    <available file="${lib}/checkstyle.jar"
	       property="checkstyle.available" />
    <fail unless="checkstyle.available"
	  message="Error: checkstyle.jar not found." />
    <available file="${lib}/jp_checks.xml"
	       property="checks.available" />
    <fail unless="checks.available"
	  message="Error: jp_checks.xml not found." />
    <!-- Create the checkstyle results directory structure -->
    <mkdir dir="${stylecheck}"/>
    <!-- Run checkstyle and save results in ${stylecheck} -->
    <checkstyle config="${lib}/jp_checks.xml"
		failureProperty="checkstyle.failure"
		failOnViolation="false" >
      <fileset dir="${src}" includes="**/*.java" />
      <formatter type="plain" />
      <formatter type="xml" tofile="${stylecheck}/checkstyle_report.xml" />
    </checkstyle>
    <xslt  in="${stylecheck}/checkstyle_report.xml"
	   out="${stylecheck}/checkstyle_report.html"
	   style="${lib}/checkstyle.xsl" />
    <!-- copy file="${lib}/checkstyle-logo.png" todir="${stylecheck}"/ -->
  </target>

  <!-- Cobertura -->
  <path id="cobertura.classpath">
    <fileset dir="${cobertura.dir}">
      <include name="cobertura*.jar"/>
      <include name="lib/**/*.jar"/>
    </fileset>
    <fileset dir="${lib}" includes="**/*.jar"/>
  </path>
  <taskdef classpathref="cobertura.classpath" resource="tasks.properties"/>
  <target name="coberturaInit">
    <mkdir dir="${coverage.dir}"/>
    <mkdir dir="${classes.dir}"/>
    <mkdir dir="${instrumented.dir}"/>
    <mkdir dir="${coverage.reports.dir}"/>
    <mkdir dir="${coverage.reports.junit.xml.dir}"/>
    <mkdir dir="${coverage.reports.junit.html.dir}"/>
    <mkdir dir="${coverage.xml.dir}"/>
    <mkdir dir="${coverage.summaryxml.dir}"/>
    <mkdir dir="${coverage.html.dir}"/>
  </target>
  <target name="coberturaCompile" depends="coberturaInit">
    <javac srcdir="${src}" destdir="${classes.dir}" debug="yes">
      <classpath refid="cobertura.classpath"/>
    </javac>
  </target>
  <target name="coberturaInstrument" depends="coberturaInit, coberturaCompile">
    <!-- Remove the coverage data file and any old instrumentation. -->
    <delete file="cobertura.ser"/>
    <delete dir="${instrumented.dir}" />
    <!-- Instrument the application classes, writing to ${instrumented.dir}. -->
    <cobertura-instrument todir="${instrumented.dir}">
      <!-- Ignore any source line with reference to slf4j/logback. -->
      <ignore regex="org.slf4j.*" />
      <fileset dir="${classes.dir}">
	<!-- Instrument all application classes, not test classes. -->
	<include name="**/*.class" />
	<exclude name="**/*Test.class" />
      </fileset>
    </cobertura-instrument>
  </target>
  <target name="coberturaTest" depends="coberturaInit, coberturaCompile">
    <junit fork="yes" dir="${basedir}" failureProperty="test.failed">
      <!--
	  Note the classpath order: instrumented classes must be before
	  original (uninstrumented) classes.  This is important!
      -->
      <classpath location="${instrumented.dir}" />
      <classpath location="${classes.dir}" />
      <!--
	  The instrumented classes reference classes used by the
	  Cobertura runtime, so Cobertura and its dependencies
	  must be in the classpath.
      -->
      <classpath refid="cobertura.classpath" />
      <formatter type="xml" />
      <test name="${testcase}" todir="${reports.xml.dir}" if="testcase" />
      <batchtest todir="${coverage.reports.junit.xml.dir}" unless="testcase">
	<fileset dir="${src}">
	  <include name="**/*Test.java" />
	</fileset>
      </batchtest>
    </junit>
    <junitreport todir="${coverage.reports.junit.xml.dir}">
      <fileset dir="${coverage.reports.junit.xml.dir}">
	<include name="TEST-*.xml" />
      </fileset>
      <report format="frames" todir="${coverage.reports.junit.html.dir}" />
    </junitreport>
  </target>
  <target name="coberturaCoverageCheck">
    <cobertura-check branchrate="34" totallinerate="100"/>
  </target>
  <target name="coberturaCoverageReport">
    <!-- Generate XML file with coverage data using "srcdir" attribute. -->
    <cobertura-report srcdir="${src}" destdir="${coverage.xml.dir}" format="xml"/>
  </target>
  <target name="coberturaSummaryCoverageReport">
    <!-- Generate summary XML file with coverage data using "srcdir" attribute. -->
    <cobertura-report srcdir="${src}" destdir="${coverage.summaryxml.dir}" format="summaryXml" />
  </target>
  <target name="coberturaAlternateCoverageReport">
    <!-- Generate HTML files with coverage data using nested source filesets. -->
    <cobertura-report destdir="${coverage.html.dir}">
      <fileset dir="${src}">
	<include name="**/*.java"/>
      </fileset>
    </cobertura-report>
    <echo></echo>
    <echo>Coverage Report root: ${coverage.html.dir}/index.html</echo>
  </target>
  <target name="coberturaClean">
    <delete dir="${coverage.dir}"/>
    <delete dir="${classes.dir}" />
    <delete dir="${instrumented.dir}" />
    <delete dir="${coverage.reports.dir}" />
    <delete file="cobertura.log" />
    <delete file="cobertura.ser" />
  </target>
  <target name="coverage"
	  depends="coberturaCompile, coberturaInstrument, coberturaTest, coberturaCoverageReport, coberturaSummaryCoverageReport, coberturaAlternateCoverageReport"
	  description="Compile, instrument, run tests, and generate JUnit and coverage reports."/>
  <!-- Cobertura END -->


  <!-- PMD and CPD -->
  <path id="pmd.classpath">
    <fileset dir="${pmd.dir}">
      <include name="*.jar"/>
      <include name="lib/**/*.jar"/>
    </fileset>
    <fileset dir="${lib}" includes="**/*.jar"/>
  </path>

  <target name="pmdInit">
    <mkdir dir="${pmd.reports.dir}"/>
  </target>
  <taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="pmd.classpath"/>
  <target name="pmd" description="process source with PMD" depends="pmdInit">
    <pmd shortFilenames="true">
      <sourceLanguage name="java" version="1.8"/>
      <ruleset>java-basic</ruleset>
      <ruleset>java-braces</ruleset>
      <ruleset>java-codesize</ruleset>
      <ruleset>java-design</ruleset>
      <ruleset>java-empty</ruleset>
      <ruleset>java-imports</ruleset>
      <ruleset>java-unusedcode</ruleset>
      <!-- <ruleset>rulesets/java/design.xml</ruleset> -->
      <!-- <ruleset>java-comments</ruleset> -->
      <!-- <ruleset>java-naming</ruleset> -->
      <formatter type="html" toFile="${pmd.reports.dir}/pmd_report.html" toConsole="true">
        <param name="linkPrefix" value="http://pmd.sourceforge.net/xref/"/>
        <param name="linePrefix" value=".line"/>
      </formatter>
      <fileset dir="${src}">
        <include name="**/*.java"/>
      </fileset>
    </pmd>
    <echo message="PMD report is at ${pmd.reports.dir}/pmd_report.html" />
  </target>

  <taskdef name="cpd" classname="net.sourceforge.pmd.cpd.CPDTask" classpathref="pmd.classpath"/>
  <target name="cpd" description="proccess source with CPD" depends="pmdInit">
    <!-- cpd minimumTokenCount="20" outputFile="cpd.txt"-->
    <cpd minimumTokenCount="20"
         format="xml" outputFile="${pmd.reports.dir}/cpd_report.xml"
         ignoreLiterals="true">
      <fileset dir="${src}">
        <include name="**/*.java"/>
      </fileset>
    </cpd>

    <property name="cpd.report.html" location="${pmd.reports.dir}/cpd_report.html" />
    <xslt in="${pmd.reports.dir}/cpd_report.xml" style="${lib}/pmd/cpdhtml.xslt" out="${cpd.report.html}" />
    <echo message="CPD report is at ${cpd.report.html}" />
  </target>

  <target name="pmdClean">
    <delete dir="${pmd.reports.dir}"/>
  </target>
  <!-- PMD and CPD END -->


  <target name="env" description="display build parameters">
    <echo>
      build.xml ${version}

      Global settings:
      java.home = ${java.home}
      user.home = ${user.home}
      java.class.path = ${java.class.path}

      Target settings:
      Classes:       ${build}
      Distribution:  ${dist}
      API Docs:      ${doc}
      Style Check:   ${stylecheck}
      Test Reports:  ${reports}
      Test Coverage: ${coverage.html.dir}
    </echo>
  </target>


  <target name="clean"
          description="clean up"
	  depends="coberturaClean, pmdClean">
    <!-- Delete the ${build} ${dist} ${doc} ${test} ${reports} and ${stylecheck} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
    <delete dir="${doc}"/>
    <delete dir="${formattedsrc}"/>
    <delete dir="${reports}"/>
    <delete dir="${test}"/>
    <delete dir="${stylecheck}"/>
    <!-- Delete the serialization test files -->
    <delete>
      <fileset dir="." includes="*.ser"/>
    </delete>
  </target>

</project>
